import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from datetime import datetime
import matplotlib.pyplot as plt

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
CSV_PATH = "usage.csv"  # —É–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É CSV

# === –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv(CSV_PATH)

# === –®–∞–≥ 2: –†–∞—Å—á—ë—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ===
def parse_time(t):
    return datetime.strptime(t, "%H:%M")

def get_time_period(t):
    h = t.hour
    if 6 <= h < 12:
        return "—É—Ç—Ä–æ"
    elif 12 <= h < 18:
        return "–¥–µ–Ω—å"
    elif 18 <= h < 24:
        return "–≤–µ—á–µ—Ä"
    else:
        return "–Ω–æ—á—å"

df['start_dt'] = df['start_time'].apply(parse_time)
df['end_dt'] = df['end_time'].apply(parse_time)
df['duration_min'] = (df['end_dt'] - df['start_dt']).dt.total_seconds() / 60
df['period'] = df['start_dt'].apply(get_time_period)

# === –®–∞–≥ 3: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
le_day = LabelEncoder()
le_period = LabelEncoder()

df['day_code'] = le_day.fit_transform(df['day_of_week'])
df['period_code'] = le_period.fit_transform(df['period'])

# === –®–∞–≥ 4: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
features = df[['table_id', 'day_code', 'period_code']]
target = df['duration_min']

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(features, target)

# === –®–∞–≥ 5: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
def predict(table_id, day_of_week, time_period):
    day_code = le_day.transform([day_of_week])[0]
    period_code = le_period.transform([time_period])[0]
    X_input = [[table_id, day_code, period_code]]
    prediction = model.predict(X_input)[0]
    print(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: —Å—Ç–æ–ª {table_id} –≤ {day_of_week} ({time_period}) –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {prediction:.1f} –º–∏–Ω—É—Ç.")
    return prediction

# === –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ===
predict(3, "–ü–Ω", "–≤–µ—á–µ—Ä")
predict(1, "–°–±", "–¥–µ–Ω—å")
